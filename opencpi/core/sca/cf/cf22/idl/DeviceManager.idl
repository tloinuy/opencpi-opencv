
/*
 *  Copyright (c) Mercury Federal Systems, Inc., Arlington VA., 2009-2010
 *
 *    Mercury Federal Systems, Incorporated
 *    1901 South Bell Street
 *    Suite 402
 *    Arlington, Virginia 22202
 *    United States of America
 *    Telephone 703-413-0781
 *    FAX 703-413-0784
 *
 *  This file is part of OpenCPI (www.opencpi.org).
 *     ____                   __________   ____
 *    / __ \____  ___  ____  / ____/ __ \ /  _/ ____  _________ _
 *   / / / / __ \/ _ \/ __ \/ /   / /_/ / / /  / __ \/ ___/ __ `/
 *  / /_/ / /_/ /  __/ / / / /___/ ____/_/ / _/ /_/ / /  / /_/ /
 *  \____/ .___/\___/_/ /_/\____/_/    /___/(_)____/_/   \__, /
 *      /_/                                             /____/
 *
 *  OpenCPI is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published
 *  by the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  OpenCPI is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with OpenCPI.  If not, see <http://www.gnu.org/licenses/>.
 */

#ifndef _DEVICEMANAGER_IDL
#define _DEVICEMANAGER_IDL

#include "PropertySet.idl"
#include "Resource.idl"
#include "FileManager.idl"
#include "InvalidObjectReference.idl"
#include "Device.idl"
#include "InvalidProfile.idl"
module CF
{

  interface DeviceManager;
  interface Device;

  
	/* The DeviceManager interface is used to manage a set of logical Devices and
	services.  The interface for a DeviceManager is based upon its attributes, which are:
	
	1. Device Configuration Profile - a mapping of physical device locations to meaningful
	labels (e.g., audio1, serial1, etc.), along with the Devices and services to be
	deployed.
	2. File System - the FileSystem associated with this DeviceManager.
	3. Device Manager Identifier  - the instance-unique identifier for this DeviceManager.
	4. Device Manager Label - the meaningful name given to this DeviceManager.
	5. Registered Devices - a list of Devices that have registered with this DeviceManager.
	6. Registered Services - a list of Services that have registered with this DeviceManager.
	
	
	The DeviceManager upon start up registers itself with a DomainManager.
	This requirement allows the system to be developed where at a minimum only the
	DomainManager's component reference needs to be known.  A DeviceManager
	uses the DeviceManager's deviceConfigurationProfile attribute for determining:
	1.  Services to be deployed for this DeviceManager (for example, log(s)),
	2. Devices to be created for this DeviceManager (when the DCD deployondevice
	element is not specified then the DCD componentinstantiation element is deployed
	on the same hardware device as the DeviceManager),
	3.  Devices to be deployed on (executing on) another Device,
	4.  Devices to be aggregated to another Device,
	5. Mount point names for FileSystems,
	6. The DCD's id attribute for the DeviceManager's identifier attribute value, and
	7. The DCD's name attribute for the DeviceManager's label attribute value.
	
	The DeviceManager creates FileSystem components implementing the FileSystem
	interface for each OS file system.  If multiple FileSystems are to be created, the
	DeviceManager mounts created FileSystems to a FileManager component
	(widened to a FileSystem through the FileSys attribute).  Each mounted FileSystem
	name must be unique within the DeviceManager.
	
	The DeviceManager supplies execute operation parameters (IDs and format values)
	for a Device consisting of:
	a. DeviceManager IOR - The ID is "DEVICE-_MGR_IOR" and the value is a string
	that is the DeviceManager stringified IOR.
	b. Profile Name - The ID is "PROFILE_NAME" and the value is a CORBA string
	that is the full mounted file system file path name.
	c. Device Identifier - The ID is "DEVICE_ID" and the value is a string that corresponds
	to the DCD componentinstantiation id attribute.
	d. Device Label - The ID is "DEVICE_LABEL" and the value is a string that corresponds
	to the DCD componentinstantiation usage element.  This parameter is only used when
	the DCD componentinstantiation usageelement is specified.
	e. Composite Device IOR - The ID is "Composite_DEVICE_IOR" and the value is a
	string
	that is an AggregateDevice stringified IOR. This parameter is only used when the DCD
	componentinstantiation element is a composite part of another componentinstantiation
	element.
	f. The execute ("execparam") properties as specified in the DCD for a
	componentinstantiation element. The DeviceManager shall pass the
	componentinstantiation element "execparam" properties that have values as parameters.
	
	The DeviceManager passes "execparam" parameters' IDs and values as string
	values.The DeviceManager uses the componentinstantiation element's SPD
	implementation code's stacksize and priority elements, when specified, for the
	execute options parameters.
	
	The DeviceManager initializes and configures logical Devices that are started
	by the DeviceManager after they have registered with the DeviceManager.
	The DeviceManager configures a DCD's componentinstantiation element
	provided the componentinstantiation element has "configure" readwrite or
	writeonly properties with values.
	
	If a Service is deployed by the DeviceManager, the DeviceManager  supplies
	execute operation parameters (IDs and format values) consisting of:
	
	a. DeviceManager IOR - The ID is "DEVICE_MGR_IOR" and the value is a string that
	is the DeviceManager stringified IOR.
	
	b. Service Name - The ID is "SERVICE_NAME" and the value is a string that
	corresponds to the DCD componentinstantiation usagename element. */
	
	interface DeviceManager : PropertySet, PortSupplier {
		/* This structure provides the object reference and name of services that have registered with the DeviceManager. */
		
		struct ServiceType {
			Object serviceObject;
			string serviceName;
		};
		
		/* This type provides an unbounded sequence of ServiceType structures for services that have 
		registered with the DeviceManager. */
		
		typedef sequence <ServiceType> ServiceSequence;
		
		/* The readonly deviceConfigurationProfile attribute contains the DeviceManager's profile. 
		The readonly deviceConfigurationProfile attribute contains either a profile element with a 
		file reference to the DeviceManager's Device Configuration Descriptor (DCD) profile or the XML for 
		the DeviceManager's DCD profile.  Files referenced within the profile are obtained from a FileSystem. */
		
		readonly attribute string deviceConfigurationProfile;
		/* The readonly fileSys attribute contains the FileSystem associated with this DeviceManager 
		or a nil CORBA object reference if no FileSystem is associated with this DeviceManager. */
		
		readonly attribute FileSystem fileSys;
		/* The readonly identifier attribute shall contain the instance-unique identifier for a DeviceManager. 
		The identifier is identical to the deviceconfiguration element id attribute of the DeviceManager's 
		Device Configuration Descriptor (DCD) file. */
		
		readonly attribute string identifier;
		/* The readonly label attribute contains the DeviceManager's label.  The label attribute is the 
		meaningful name given to a DeviceManager. */
		
		readonly attribute string label;
		/* The readonly registeredDevices attribute contains a list of Devices that have registered with this 
		DeviceManager or a sequence length of zero if no Devices have
		registered with the DeviceManager. */
		
		readonly attribute DeviceSequence registeredDevices;
		/* The readonly registeredServices attribute shall contain a list of Services that have registered 
		with this DeviceManager or a sequence length of zero if no Services have registered with the DeviceManager. */
		
		readonly attribute ServiceSequence registeredServices;
		
		/* This operation provides the mechanism to register a Device with a DeviceManager.

		The registerDevice operation adds the input registeringDevice to the DeviceManager's registeredDevices 
		attribute when the input registeringDevice does not already exist in the registeredDevices attribute. The 
		registeringDevice is ignored when duplicated. 
	
		The registerDevice operation registers the registeringDevice with the DomainManager when the 
		DeviceManager has already registered to the DomainManager and the registeringDevice has been 
		successfully added to the DeviceManager's registeredDevices attribute.
	
		The registerDevice operation writes a log record with the log level set to FAILURE_ALARM, upon 
		unsuccessful registration of a Device to the DeviceManager's registeredDevices.


		This operation does not return any value.

		The registerDevice operation raises the CF InvalidObjectReference when the input registeredDevice 
		is a nil CORBA object reference.
		@roseuid 3ACFA4F90122 */
		void registerDevice (
			in Device registeringDevice
			)			
			raises (InvalidObjectReference);
			
		/* This operation unregisters a Device from a DeviceManager.
		The unregisterDevice operation removes the input registeredDevice from the DeviceManager's 
		registeredDevices attribute.  The unregisterDevice operation unregisters the input registeredDevice 
		from the DomainManager when the input registeredDevice is registered with the DeviceManager and the 
		DeviceManager is not shutting down.  
	
		The unregisterDevice operation writes a log record with the log level set to FAILURE_ALARM, 
		when it cannot successfully remove a registeredDevice from the DeviceManager's registeredDevices.

		This operation does not return any value.

		The unregisterDevice operationraises the CF InvalidObjectReference when the input 
		registeredDevice is a nil CORBA object reference or does not exist in the DeviceManager's 
		registeredDevices attribute.
		@roseuid 3ACFA5040000 */
		void unregisterDevice (
			in Device registeredDevice
			)			
			raises (InvalidObjectReference);
			
		/* This operation provides the mechanism to terminate a DeviceManager. 

		The shutdown operation unregisters the DeviceManager from the DomainManager. 

		The shutdown operation performs releaseObject on all of the DeviceManager's registered 
		Devices (DeviceManager's registeredDevices attribute).

		The shutdown operation causes the DeviceManager to be unavailable (i.e. released 
		from the CORBA environment and its process terminated on the OS), when all of the 
		DeviceManager's registered Devices are unregistered from the DeviceManager.

		This operation does not return any value.

		This operation does not raise any exceptions.
		@roseuid 3ACFA50E0302 */
		void shutdown ();
			
		/* This operation provides the mechanism to register a Service with a DeviceManager.

		The registerService operation adds the input registeringService to the DeviceManager's 
		registeredServices attribute when the input registeringService does not already exist in the 
		registeredServices attribute. The registeringService is ignored when duplicated. 
	
		The registerService operation registers the registeringService with the DomainManager when the 
		DeviceManager has already registered to the DomainManager and the registeringService has been
		successfully added to the DeviceManager's registeredServices attribute.
	
		The registerService operation writes a log record with the log level set to FAILURE_ALARM, 
		upon unsuccessful registration of a Service to the DeviceManager's registeredServices.

		This operation does not return any value.

		The registerService operation raises the CF InvalidObjectReference exception when the input 
		registeredService is a nil CORBA object reference.
		@roseuid 3B338F910156 */
		void registerService (
			in Object registeringService,
			in string name
			)			
			raises (InvalidObjectReference);
			
		/* This operation unregisters a Service from a DeviceManager.

		The unregisterService operation removes the input registeredService from the 
		DeviceManager's registeredServices attribute.  The unregisterService operation unregisters 
		the input registeredService from the DomainManager when the input registeredService is 
		registered with the DeviceManager and the DeviceManager is not in the shutting down state.  
	
		The unregisterService operation writes a log record with the log level set to FAILURE_ALARM, 
		when it cannot successfully remove a registeredService from the DeviceManager's registeredServices.

		This operation does not return any value.

		The unregisterService operation raises the CF InvalidObjectReference when the input 
		registeredService is a nil CORBA object reference or does not exist in the 
		DeviceManager's registeredServices attribute.
		@roseuid 3B338F950007 */
		void unregisterService (
			in Object registeredService,
			in string name
			)			
			raises (InvalidObjectReference);
			
		/* This operation returns the SPD implementation ID that the DeviceManager interface 
		used to create a component.

		The getComponentImplementationId operation will return the SPD implementation element's 
		ID attribute that matches the ID attribute of the SPD implementation element used to create 
		the component specified by the input componentInstantiation ID parameter.

		The getComponentImplementationId operation returns the SPD implementation element's ID a
		ttribute that matches the SPD implementation element used to create the component 
		identified by the input componentInstantiationID parameter.  The getComponentImplementationId 
		operation returns an empty string when the input componentInstantiationId parameter does not 
		match the ID attribute of any SPD implementation element used to create the component.

		This operation does not raise any exceptions.
		@roseuid 3B45B6E301FB */
		string getComponentImplementationId (
			in string componentInstantiationId
			);
			
	};
}; //module CF
#endif
