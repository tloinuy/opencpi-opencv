
/*
 *  Copyright (c) Mercury Federal Systems, Inc., Arlington VA., 2009-2010
 *
 *    Mercury Federal Systems, Incorporated
 *    1901 South Bell Street
 *    Suite 402
 *    Arlington, Virginia 22202
 *    United States of America
 *    Telephone 703-413-0781
 *    FAX 703-413-0784
 *
 *  This file is part of OpenCPI (www.opencpi.org).
 *     ____                   __________   ____
 *    / __ \____  ___  ____  / ____/ __ \ /  _/ ____  _________ _
 *   / / / / __ \/ _ \/ __ \/ /   / /_/ / / /  / __ \/ ___/ __ `/
 *  / /_/ / /_/ /  __/ / / / /___/ ____/_/ / _/ /_/ / /  / /_/ /
 *  \____/ .___/\___/_/ /_/\____/_/    /___/(_)____/_/   \__, /
 *      /_/                                             /____/
 *
 *  OpenCPI is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published
 *  by the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  OpenCPI is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with OpenCPI.  If not, see <http://www.gnu.org/licenses/>.
 */

#ifndef _FILESYSTEM_IDL
#define _FILESYSTEM_IDL

#include "DataType.idl"
#include "StringSequence.idl"
#include "File.idl"

module CF
{
  /**
   *  The FileSystem interface defines the CORBA operations to enable 
   * remote access to a physical file system.
   */
  
  interface FileSystem {
    /**
     *  This exception indicates a set of properties unknown by the 
     * FileSystem object.
     */
    
    exception UnknownFileSystemProperties {
      Properties invalidProperties;
    };
    
    /**
     *  This constant indicates file system size.
     */
    
    const string SIZE = "SIZE";
    /**
     *  This constant indicates the available space on the file 
     * system.
     */
    
    const string AVAILABLE_SIZE = "AVAILABLE_SPACE";

		/**
     * The FileType indicates the type of file entry. A file system can have
     * PLAIN or DIRECTORY files and mounted file systems contained in a
     * FileSystem.
     */
		
		enum FileType
    {
			PLAIN,
			DIRECTORY,
			FILE_SYSTEM
		};

		/**
     * The FileInformationType indicates the information returned for a file.
     * Not all the fields in the FileInformationType are applicable for all file
     * systems. At a minimum, the FileSystem shall support name, kind, and size
     * information for a file. Examples of other file properties that can be
     * specified are created time, modified time, and last access time.
     *
     * name: This field indicates the simple name of the file.
     * kind: This field indicates the type of the file entry.
     * size: This field indicates the size in octets.
     */
		
		struct FileInformationType
    {
			string name;
			FileType kind;
			unsigned long long size;
			Properties fileProperties;
		};
		
		typedef sequence <FileInformationType> FileInformationSequence;
	
		/**
     * The CREATED_TIME_ID is the identifier for the created time file property.
     * A created time property indicates the time the file was created. The
     * value for created time shall be long long and measured in seconds since
     * 00:00:00 UTC, Jan. 1, 1970.
     */
		
		const string CREATED_TIME_ID = "CREATED_TIME";

		/**
     * The MODIFIED_TIME_ID is the identifier for the modified time file
     * property. The modified time property is the time the file data was last
     * modified. The value for modified time property shall be long long and
     * measured in seconds since 00:00:00 UTC, Jan. 1, 1970.
     */
		
     const string MODIFIED_TIME_ID = "MODIFIED_TIME";

		/**
     * The LAST_ACCESS_TIME_ID is the identifier for the last access time file
     * property. The last access time property is the time the file was last
     * access (e.g. read). The value for last access time property shall be long
     * long and measured in seconds since 00:00:00 UTC, Jan. 1, 1970.
     */
		
		const string LAST_ACCESS_TIME_ID = "LAST_ACCESS_TIME";

    /**
     *  The remove operation removes the file with the given filename.  
     * This operation ensures that the filename is an absolute pathname 
     * of the file relative to the target FileSystem. If an error 
     * occurs, this operation raises the appropriate exception:
     * 
     * CF InvalidFilename   - The filename is not valid.
     * CF FileException     - A file-related error occurred during 
     *         the operation.
     */
    void remove (
      in string fileName
      )      
      raises (FileException, InvalidFileName);
      
    /**
     *  The copy operation copies the source file with the specified 
     * sourceFileName to the destination file with the specified 
     * destinationFileName. This operation ensures that the 
     * sourceFileName and destinationFileName are absolute pathnames 
     * relative to the target FileSystem. If an error occurs, this 
     * operation raises the appropriate exception:
     * 
     * CF InvalidFilename   - The filename is not valid.
     * CF FileException     - A file-related error occurred during 
     *         the operation.
     */
    void copy (
      in string sourceFileName,
      in string destinationFileName
      )      
      raises (InvalidFileName, FileException);
      
    /**
     *  The exists operation checks to see if a file exists based on 
     * the filename parameter. This operation ensures that the filename 
     * is a full pathname of the file relative to the target FileSystem 
     * and raise an CF InvalidFileName exception if the name is invalid.
     * 
     * This operation shall return True if the file exists, otherwise 
     * False shall be returned.
     */
    boolean exists (
      in string fileName
      )      
      raises (InvalidFileName);
      
		/**
     * The list operation provides the ability to obtain a list of files along
     * with their information in the FileSystem according to a given search
     * pattern. The list operation can be used to return information for one
     * file or for a set of files. The list operation returns a list of file
     * information based upon the search pattern given. The list operation
     * supports the following wildcard characters for base file names (i.e.,
     * the part after the right-most slash):
     *    (1) * used to match any sequence of characters (including null).
     *    (2) ? used to match any single character.
     * These wildcards may only be applied to the base filename in the search
     * pattern given. For example, the following are valid search patterns:
     *    /tmp/files/ *.*	Returns all files and directories within the
     *                    /tmp/files directory. Directory names indicated with
     *                    a "/" at the end of the name.
     *    /tmp/files/foo*	Returns all files beginning with the letters "foo" in
     *                    the /tmp/files directory.
     *    /tmp/files/f??  Returns all 3 letter files beginning with the letter
     *                    f in the /tmp/files directory.
     * The list operation returns a FileInformationSequence for files that 
     * match the wildcard specification as specified in the input pattern
     * parameter. The list operation will return a zero length sequence when no
     * file matching occurred for the input pattern parameter.
     *
     * The list operation raises the InvalidFileName exception when the input
     * pattern does not start with a slash "/" or cannot be interpreted due to
     * unexpected characters. The list operation raises the FileException when
     * a file-related error occurs.
		 */
		FileInformationSequence list (
			in string pattern
			)			
			raises (FileException, InvalidFileName);
	      
    /**
     *  The create operation creates a new File based upon the 
     * provided file name and returns a File to the opened file.  A null 
     * file is returned and a related exception shall be raised if an 
     * error occurs.
     * 
     * CF InvalidFilename   - The filename is not valid.
     * CF FileException     - File already exists or another file 
     *         error occurred.
     */
    File create (
      in string fileName
      )      
      raises (InvalidFileName, FileException);
      
    /**
     *  The open operation opens a file based upon the input fileName. 
     * The read_Only parameter indicates if the file should be opened 
     * for read access only.  When read_Only is false the file is opened 
     * for write access.
     * 
     * The open operation returns a File component parameter on 
     * successful completion.  The open operation returns a null file 
     * component reference if the open operation is unsuccessful.  If 
     * the file is opened with the read_Only flag set to true, then 
     * writes to the file will be considered an error.
     * 
     * The open operation raises the CF FileException if the file does 
     * not exist or another file error occurred.
     * 
     * The open operation raises the CF InvalidFilename exception when 
     * the filename is not a valid file name or not an absolute 
     * pathname.
     */
    File open (
      in string fileName,
      in boolean read_Only
      )      
      raises (InvalidFileName, FileException);
      
    /**
     *  The mkdir operation create a FileSystem directory based on the 
     * directoryName given.  This operation creates all parent 
     * directories required to create the directory path given. If an 
     * error occurs, this operation raises the appropriate exception.
     * 
     * Exceptions/Errors
     * CF InvalidFilename   - The directory name is not valid.
     * CF FileException     - A file-related error occurred during 
     *         the operation.
     */
    void mkdir (
      in string directoryName
      )      
      raises (InvalidFileName, FileException);
      
    /**
     *  The rmdir operation removes a FileSystem directory based on 
     * the directoryName given. If an error occurs, this operation 
     * raises the appropriate exception.
     * 
     * Exceptions/Errors
     * CF InvalidFilename   - The directory name is not valid.
     * CF FileException     - Directory does not exist or another 
     *         file-related error occurred.
     */
    void rmdir (
      in string directoryName
      )      
      raises (InvalidFileName, FileException);
      
    /**
     *  The query operation returns file system information to the 
     * calling client based upon the given fileSystemProperties' ID.  
     * 
     * As a minimum, the FileSystem query operation supports the 
     * following fileSystemProperties:
     * 1. SIZE - an ID value of "SIZE causes query to return an unsigned 
     * long long containing the file system size (in octets).
     * 2. AVAILABLE SPACE - an ID value of "AVAILABLE SPACE" causes the 
     * query operation to return an unsigned long long containing the 
     * available space on the file system (in octets).
     * 
     * 
     * The query operation raises the UnknownFileSystemProperties 
     * exception when the given file system property is not recognized.
     */
    void query (
      inout Properties fileSystemProperties
      )      
      raises (UnknownFileSystemProperties);
      
  };
};

#pragma version CF::FileSystem 1.0

#endif
