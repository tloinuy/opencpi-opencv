
/*
 *  Copyright (c) Mercury Federal Systems, Inc., Arlington VA., 2009-2010
 *
 *    Mercury Federal Systems, Incorporated
 *    1901 South Bell Street
 *    Suite 402
 *    Arlington, Virginia 22202
 *    United States of America
 *    Telephone 703-413-0781
 *    FAX 703-413-0784
 *
 *  This file is part of OpenCPI (www.opencpi.org).
 *     ____                   __________   ____
 *    / __ \____  ___  ____  / ____/ __ \ /  _/ ____  _________ _
 *   / / / / __ \/ _ \/ __ \/ /   / /_/ / / /  / __ \/ ___/ __ `/
 *  / /_/ / /_/ /  __/ / / / /___/ ____/_/ / _/ /_/ / /  / /_/ /
 *  \____/ .___/\___/_/ /_/\____/_/    /___/(_)____/_/   \__, /
 *      /_/                                             /____/
 *
 *  OpenCPI is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published
 *  by the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  OpenCPI is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with OpenCPI.  If not, see <http://www.gnu.org/licenses/>.
 */


#ifndef MODULE_COS_LW_LOG_STATUS_IDL
#define MODULE_COS_LW_LOG_STATUS_IDL

#include <orb.idl>
#pragma prefix "omg.org"

module CosLwLog
{
  //  typeprefix CosLwLog "omg.org";

  // The following constants are intended to identify
  // the nature of a logging record. The constants
  // represent the valid values for LogLevel
  // The list of constants may be expanded

  const unsigned short SECURITY_ALARM = 1;
  const unsigned short FAILURE_ALARM = 2;
  const unsigned short DEGRADED_ALARM = 3;
  const unsigned short EXCEPTION_ERROR = 4;
  const unsigned short FLOW_CONTROL_ERROR = 5;
  const unsigned short RANGE_ERROR = 6;
  const unsigned short USAGE_ERROR = 7;
  const unsigned short ADMINISTRATIVE_EVENT = 8;
  const unsigned short STATISTIC_REPORT = 9;
  // Values ranging from 10 to 26 are reserved for
  // 16 debugging levels.

  typedef unsigned short LogLevel;
  enum OperationalState { disabled, enabled };
  enum AdministrativeState { locked, unlocked };
  enum LogFullAction { WRAP, HALT };
  typedef unsigned long long RecordId;

  struct LogTime {
    long seconds;
    long nanoseconds;
  };

  struct AvailabilityStatus {
    boolean off_duty;
    boolean log_full;
  };

  struct ProducerLogRecord {
    string producerId;
    string producerName;
    LogLevel level;
    string logData;
  };

  struct LogRecord {
    RecordId id;
    LogTime time;
    ProducerLogRecord info;
  };

  typedef sequence<LogRecord> LogRecordSequence;
  typedef sequence<ProducerLogRecord> ProducerLogRecordSequence;
  typedef sequence<LogLevel> LogLevelSequence;
  typedef sequence<string> StringSeq;

  exception InvalidParam {
    string details;
  };

  interface LogStatus {
    unsigned long long get_max_size ();
    unsigned long long get_current_size ();
    unsigned long long get_n_records ();
    LogFullAction get_log_full_action ();
    AvailabilityStatus get_availability_status ();
    AdministrativeState get_administrative_state ();
    OperationalState get_operational_state ();
  };

};

#endif //  MODULE_COS_LW_LOG_STATUS_IDL
