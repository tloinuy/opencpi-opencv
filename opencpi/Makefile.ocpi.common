# #####
#
#  Copyright (c) Mercury Federal Systems, Inc., Arlington VA., 2009-2010
#
#    Mercury Federal Systems, Incorporated
#    1901 South Bell Street
#    Suite 402
#    Arlington, Virginia 22202
#    United States of America
#    Telephone 703-413-0781
#    FAX 703-413-0784
#
#  This file is part of OpenCPI (www.opencpi.org).
#     ____                   __________   ____
#    / __ \____  ___  ____  / ____/ __ \ /  _/ ____  _________ _
#   / / / / __ \/ _ \/ __ \/ /   / /_/ / / /  / __ \/ ___/ __ `/
#  / /_/ / /_/ /  __/ / / / /___/ ____/_/ / _/ /_/ / /  / /_/ /
#  \____/ .___/\___/_/ /_/\____/_/    /___/(_)____/_/   \__, /
#      /_/                                             /____/
#
#  OpenCPI is free software: you can redistribute it and/or modify
#  it under the terms of the GNU Lesser General Public License as published
#  by the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  OpenCPI is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU Lesser General Public License for more details.
#
#  You should have received a copy of the GNU Lesser General Public License
#  along with OpenCPI.  If not, see <http://www.gnu.org/licenses/>.
#
########################################################################### #



#
# ----------------------------------------------------------------------
# The rest should work.
# ----------------------------------------------------------------------
#

ifeq ($(OCPI_ASSERT),0)
ALLDEFS += NDEBUG
endif

ifeq ($(findstring Cygwin,$(shell uname -a)),Cygwin)
# Assume that we're using Cygwin's make
MKDEPENDFLAGS += --pathtype cygwin
else
ifeq ($(findstring Msys,$(shell uname -a)),Msys)
# Assume that we're using Msys' make
MKDEPENDFLAGS += --pathtype mingw
endif
endif

ifeq ($(OCPI_OS),winnt)

#
# Win32 compile-time configuration
#

ifeq ($(WINNT_TOOLCHAIN),mingw)

#
# Use MinGW
#

CC = gcc
CXX = c++
LD = c++
AR = ar

MKDEPENDFLAGS += --xpattern "MinGW"

CFLAGS += -DWIN32 -D_WIN32_WINNT=0x0400
CXXFLAGS += -DWIN32 -D_WIN32_WINNT=0x0400

ifeq ($(OCPI_DEBUG),1)
CFLAGS += -g
CXXFLAGS += -g
else
CFLAGS += -O2
CXXFLAGS += -O2
endif

BASICLIBS = -lws2_32

.SUFFIXES : .asm .cpp .cxx .c .obj .exe .lib .idl .d

$(OBJDIR)/%.obj : %.asm
	$(CC) -c -o "$@" $(ASMFLAGS) \
		$(patsubst %,-D%=1,$(ALLDEFS)) \
		$(addprefix -I,$(ALLINC)) \
		"$<"

$(OBJDIR)/%.obj : %.c
	$(CC) -c -o "$@" $(CFLAGS) \
		$(patsubst %,-D%=1,$(ALLDEFS)) \
		$(addprefix -I,$(ALLINC)) \
		"$<"

$(OBJDIR)/%.obj : %.cxx
	$(CXX) -c -o "$@" $(CXXFLAGS) \
		$(patsubst %,-D%=1,$(ALLDEFS)) \
		$(addprefix -I,$(ALLINC)) \
		"$<"

$(OBJDIR)/%.obj : %.cpp
	$(CXX) -c -o "$@" $(CXXFLAGS) \
		$(patsubst %,-D%=1,$(ALLDEFS)) \
		$(addprefix -I,$(ALLINC)) \
		"$<"

%.d : %.c
	$(CC) -E $(CFLAGS) \
		$(patsubst %,-D%=1,$(ALLDEFS)) \
		$(addprefix -I,$(ALLINC)) \
		"$<" | \
	$(MKDEPEND) \
		--srcfile "$<" \
		--target "$(patsubst %.c,\$$(OBJDIR)/%.obj,$<)" \
		--target "$@" \
		$(MKDEPENDFLAGS) \
		-o "$@"

%.d : %.cxx
	$(CXX) -E $(CXXFLAGS) \
		$(patsubst %,-D%=1,$(ALLDEFS)) \
		$(addprefix -I,$(ALLINC)) \
		"$<" | \
	$(MKDEPEND) \
		--srcfile "$<" \
		--target "$(patsubst %.cxx,\$$(OBJDIR)/%.obj,$<)" \
		--target "$@" \
		$(MKDEPENDFLAGS) \
		-o "$@"

%.d : %.cpp
	$(CXX) -E $(CXXFLAGS) \
		$(patsubst %,-D%=1,$(ALLDEFS)) \
		$(addprefix -I,$(ALLINC)) \
		"$<" | \
	$(MKDEPEND) \
		--srcfile "$<" \
		--target "$(patsubst %.cpp,\$$(OBJDIR)/%.obj,$<)" \
		--target "$@" \
		$(MKDEPENDFLAGS) \
		-o "$@"

$(OBJDIR)/%.exe : $(OBJDIR)/%.obj
	$(LD) $(LDFLAGS) -o "$@" \
		$(filter %.obj,$^) \
		$(DYNOBJS) \
		$(patsubst %,-L%$(OCPI_OUT_DIR),$(dir $(ALLLIBS))) \
		$(addprefix -L,$(dir $(SYSLIBS))) \
		$(addprefix -l,$(notdir $(ALLLIBS) $(SYSLIBS))) \
		$(BASICLIBS)

else

#
# Use MSVC++
#

CC = cl
CXX = cl
LD = link
CFLAGS += /nologo /W3 /DWIN32 /D_WIN32_WINNT=0x0400
CXXFLAGS += /nologo /Zm400 /GR /GX /Zc:wchar_t /W3 /DWIN32 /D_WIN32_WINNT=0x0400 /wd4049 /wd4290
LDFLAGS += /nologo
BASICLIBS = ws2_32.lib

MKDEPENDFLAGS += --xpattern "Microsoft Visual Studio"

ifeq ($(OCPI_DEBUG),1)
CFLAGS += /MDd /Zi
CXXFLAGS += /MDd /Zi
LDFLAGS += /OCPI_DEBUG
BASICLIBS += msvcrtd.lib
else
CFLAGS += /MD /Ox
CXXFLAGS += /MD /Ox
BASICLIBS += msvcrt.lib
endif

.SUFFIXES:
.SUFFIXES: .asm .cpp .cxx .c .obj .exe .lib .idl .d

$(OBJDIR)/%.obj : %.asm
	$(CC) /c /Fo"$@" /Fd"$(OBJDIR)/vc70.pdb" $(ASMFLAGS) \
		$(patsubst %,-D%=1,$(ALLDEFS)) \
		$(addprefix -I,$(ALLINC)) \
		"$<"

$(OBJDIR)/%.obj : %.c
	$(CC) /c /Fo"$@" /Fd"$(OBJDIR)/vc70.pdb" $(CFLAGS) \
		$(patsubst %,/D%=1,$(ALLDEFS)) \
		$(addprefix /I,$(ALLINC)) \
		"$<"

$(OBJDIR)/%.obj : %.cxx
	$(CXX) /c /Fo"$@" /Fd"$(OBJDIR)/vc70.pdb" $(CXXFLAGS) \
		$(patsubst %,/D%=1,$(ALLDEFS)) \
		$(addprefix /I,$(ALLINC)) \
		"$<"

$(OBJDIR)/%.obj : %.cpp
	$(CXX) /c /Fo"$@" /Fd"$(OBJDIR)/vc70.pdb" $(CXXFLAGS) \
		$(patsubst %,/D%=1,$(ALLDEFS)) \
		$(addprefix /I,$(ALLINC)) \
		"$<"

%.d : %.c
	$(CC) /E $(CFLAGS) \
		$(patsubst %,/D%=1,$(ALLDEFS)) \
		$(addprefix /I,$(ALLINC)) \
		"$<" | \
	$(MKDEPEND) \
		--srcfile "$<" \
		--target "$(patsubst %.c,\$$(OBJDIR)/%.obj,$<)" \
		--target "$@" \
		$(MKDEPENDFLAGS) \
		-o "$@"

%.d : %.cxx
	$(CXX) /E $(CXXFLAGS) \
		$(patsubst %,/D%=1,$(ALLDEFS)) \
		$(addprefix /I,$(ALLINC)) \
		"$<" | \
	$(MKDEPEND) \
		--srcfile "$<" \
		--target "$(patsubst %.cxx,\$$(OBJDIR)/%.obj,$<)" \
		--target "$@" \
		$(MKDEPENDFLAGS) \
		-o "$@"

%.d : %.cpp
	$(CXX) /E $(CXXFLAGS) \
		$(patsubst %,/D%=1,$(ALLDEFS)) \
		$(addprefix /I,$(ALLINC)) \
		"$<" | \
	$(MKDEPEND) \
		--srcfile "$<" \
		--target "$(patsubst %.cpp,\$$(OBJDIR)/%.obj,$<)" \
		--target "$@" \
		$(MKDEPENDFLAGS) \
		-o "$@"

$(OBJDIR)/%.exe : $(OBJDIR)/%.obj
	$(LD) $(LDFLAGS) /OUT:"$@" \
		$(filter %.obj,$^) \
		$(DYNOBJS) \
		$(patsubst %,/libpath:%$(OCPI_OUT_DIR),$(dir $(ALLLIBS))) \
		$(addprefix /libpath:,$(dir $(SYSLIBS))) \
		$(addsuffix .lib,$(notdir $(ALLLIBS) $(SYSLIBS))) \
		$(BASICLIBS)

endif

ifeq ($(OCPI_BUILD_SHARED_LIBRARIES),0)
# See Makefile.fp.for-pkg
$(error Building Windows shared libraries with msvc is not supported yet.)
endif

else
ifneq ($(filter linux darwin,$(OCPI_OS)),)
#
# Unix compile-time configuration
#

ifeq ($(OCPI_OS),darwin)
SO=dylib
SHARED=-dynamiclib
BASICLIBS=
CXXFLAGS += -Wall
# CXXFLAGS += -mdynamic-no-pic ideally do this for main programs...
else
ifeq ($(OCPI_BUILD_SHARED_LIBRARIES),1)
SHARED=-shared
CFLAGS += -fPIC
CXXFLAGS += -fPIC -Wall
endif
SO=so
endif
ifeq ($(OCPI_CROSS_HOST),)
CC = gcc
CXX = c++
LD = c++
else
CC = $(OCPI_CROSS_BUILD_BIN_DIR)/$(OCPI_CROSS_HOST)-gcc
CXX = $(OCPI_CROSS_BUILD_BIN_DIR)/$(OCPI_CROSS_HOST)-c++
LD = $(OCPI_CROSS_BUILD_BIN_DIR)/$(OCPI_CROSS_HOST)-c++
endif

MKDEPENDFLAGS += --xpattern "/usr"

ifneq ($(OCPI_CROSS_HOST),)
MKDEPENDFLAGS += --xpattern "$(OCPI_CROSS_HOST)"
endif

ifeq ($(findstring timesys,$(OCPI_CROSS_BUILD_BIN_DIR)),timesys)
MKDEPENDFLAGS += --xpattern "timesys"
endif

ifeq ($(OCPI_OS),darwin)
CFLAGS+=-DMACOS
CXXFLAGS+=-DMACOS -D_DARWIN_C_SOURCE
endif

ifeq ($(OCPI_DEBUG),1)
CFLAGS += -g
CXXFLAGS += -g
else
CFLAGS += -O2
CXXFLAGS += -O2
endif

ifeq ($(OCPI_OS),linux)
# Linux libraries
BASICLIBS = -lpthread -lrt -ldl
#ifeq ($(OCPI_BUILD_SHARED_LIBRARIES),1)
#BASICLIBS += -ldl
#endif
else ifneq ($(OCPI_OS),darwin)
# Solaris libraries
BASICLIBS = -lpthread -lsocket -lnsl -lrt
endif

.SUFFIXES : .asm .cpp .cxx .c .obj .exe .lib .idl .d

$(OBJDIR)/%.obj : %.asm
	$(CC) -c -o "$@" $(ASMFLAGS) \
		$(patsubst %,-D%=1,$(ALLDEFS)) \
		$(addprefix -I,$(ALLINC)) \
		"$<"

$(OBJDIR)/%.obj : %.c
	$(CC) -c -o "$@" $(CFLAGS) \
		$(patsubst %,-D%=1,$(ALLDEFS)) \
		$(addprefix -I,$(ALLINC)) \
		"$<"

$(OBJDIR)/%.obj : %.cxx
	$(CXX) -c -o "$@" $(CXXFLAGS) \
		$(patsubst %,-D%=1,$(ALLDEFS)) \
		$(addprefix -I,$(ALLINC)) \
		"$<"


$(OBJDIR)/%.obj : %.cpp
	$(CXX) -c -o "$@" $(CXXFLAGS) \
		$(patsubst %,-D%=1,$(ALLDEFS)) \
		$(addprefix -I,$(ALLINC)) \
		"$<"

%.d : %.c
	$(CC) -E $(CFLAGS) \
		$(patsubst %,-D%=1,$(ALLDEFS)) \
		$(addprefix -I,$(ALLINC)) \
		"$<" | \
	$(MKDEPEND) \
		--srcfile "$<" \
		--target "$(patsubst %.c,\$$(OBJDIR)/%.obj,$<)" \
		--target "$@" \
		$(MKDEPENDFLAGS) \
		-o "$@"

%.d : %.cxx
	$(CXX) -E $(CXXFLAGS) \
		$(patsubst %,-D%=1,$(ALLDEFS)) \
		$(addprefix -I,$(ALLINC)) \
		"$<" | \
	$(MKDEPEND) \
		--srcfile "$<" \
		--target "$(patsubst %.cxx,\$$(OBJDIR)/%.obj,$<)" \
		--target "$@" \
		$(MKDEPENDFLAGS) \
		-o "$@"

%.d : %.cpp
	$(CXX) -E $(CXXFLAGS) \
		$(patsubst %,-D%=1,$(ALLDEFS)) \
		$(addprefix -I,$(ALLINC)) \
		"$<" | \
	$(MKDEPEND) \
		--srcfile "$<" \
		--target "$(patsubst %.cpp,\$$(OBJDIR)/%.obj,$<)" \
		--target "$@" \
		$(MKDEPENDFLAGS) \
		-o "$@"

$(OBJDIR)/%.exe : $(OBJDIR)/%.obj
	$(LD) $(LDFLAGS) -o "$@" \
		$(filter %.obj,$^) \
		$(DYNOBJS) \
		$(patsubst %,-L%$(OCPI_OUT_DIR),$(dir $(ALLLIBS))) \
		$(addprefix -L,$(dir $(SYSLIBS)) $(SYSLIBDIRS)) \
		$(addprefix -l,$(notdir $(ALLLIBS) $(SYSLIBS))) \
		$(BASICLIBS)

else
ifeq ($(OCPI_OS),vxworksdkm)

#
# VxWorks (DKM) compile-time configuration
#

WIND_LIC_PROXY := $(WIND_HOME)/setup/$(WIND_HOST_TYPE)/bin
WIND_FOUNDATION_PATH := $(wildcard $(WIND_WORKBENCH)/foundation/*)
export WIND_HOME WIND_BASE WIND_LIC_PROXY

CFLAGS += -Wall
CXXFLAGS += -Wall
LDFLAGS +=

ifeq ($(WIND_BUILD_SPEC),PPC85XXgnu)
CC = $(WIND_GNU_PATH)/$(WIND_HOST_TYPE)/bin/ccppc
CXX = $(WIND_GNU_PATH)/$(WIND_HOST_TYPE)/bin/c++ppc
LD = $(WIND_GNU_PATH)/$(WIND_HOST_TYPE)/bin/c++ppc
AR = $(WIND_GNU_PATH)/$(WIND_HOST_TYPE)/bin/arppc
NM = $(WIND_WORKBENCH)/$(WIND_HOST_TYPE)/bin/nmppc
MUNCH = $(WIND_FOUNDATION_PATH)/$(WIND_HOST_TYPE)/bin/tclsh $(WIND_BASE)/host/resource/hutils/tcl/munch.tcl -c ppc
CFLAGS += -mcpu=8540 -mabi=no-spe -msoft-float -mstrict-align -mregnames -mlongcall
CXXFLAGS += -mcpu=8540 -mabi=no-spe -msoft-float -mstrict-align -mregnames -mlongcall
LDFLAGS += -non-static -msoft-float -L$(WIND_BASE)/target/lib/ppc/PPC32/sfcommon
else
ifeq ($(WIND_BUILD_SPEC),SIMNTgnu)
CC = $(WIND_GNU_PATH)/$(WIND_HOST_TYPE)/bin/ccpentium
CXX = $(WIND_GNU_PATH)/$(WIND_HOST_TYPE)/bin/c++pentium
LD = $(WIND_GNU_PATH)/$(WIND_HOST_TYPE)/bin/c++pentium
AR = $(WIND_GNU_PATH)/$(WIND_HOST_TYPE)/bin/arpentium
NM = $(WIND_WORKBENCH)/$(WIND_HOST_TYPE)/bin/nmpentium
MUNCH = $(WIND_FOUNDATION_PATH)/$(WIND_HOST_TYPE)/bin/tclsh $(WIND_BASE)/host/resource/hutils/tcl/munch.tcl -c pentium
CFLAGS += -mtune=i486 -march=i486 -DCPU=SIMNT -DTOOL_FAMILY=gnu -DTOOL=gnu
CXXFLAGS += -mtune=i486 -march=i486 -DCPU=SIMNT -DTOOL_FAMILY=gnu -DTOOL=gnu
LDFLAGS += -L$(WIND_BASE)/target/lib/simpc/SIMNT/sfcommon
else
$(error VxWorks DKM build for $(WIND_BUILD_SPEC) not implemented yet.)
endif
endif

CFLAGS += -D_WRS_KERNEL
CXXFLAGS += -D_WRS_KERNEL -fexceptions -frtti

EXTRA_INCLUDES += $(WIND_BASE)/target/h $(WIND_BASE)/target/h/wrn/coreip

ASMFLAGS += -xassembler-with-cpp  $(CLFAGS)
MKDEPENDFLAGS += --xpattern WindRiver

ifeq ($(OCPI_DEBUG),1)
CFLAGS += -g
CXXFLAGS += -g
else
CFLAGS += -O3
CXXFLAGS += -O3
endif

BASICLIBS = # -lstdc++ # Built into the kernel

.SUFFIXES :
.SUFFIXES : .asm .cpp .cxx .c .obj .exe .lib .idl .out .d

$(OBJDIR)/%.obj : %.asm
	$(CC) -c -o "$@" $(ASMFLAGS) \
		$(patsubst %,-D%=1,$(ALLDEFS)) \
		$(addprefix -I,$(ALLINC)) \
		"$<"

$(OBJDIR)/%.obj : %.c
	$(CC) -c -o "$@" $(CFLAGS) \
		$(patsubst %,-D%=1,$(ALLDEFS)) \
		$(addprefix -I,$(ALLINC)) \
		"$<"

$(OBJDIR)/%.obj : %.cxx
	$(CXX) -c -o "$@" $(CXXFLAGS) \
		$(patsubst %,-D%=1,$(ALLDEFS)) \
		$(addprefix -I,$(ALLINC)) \
		"$<"

$(OBJDIR)/%.obj : %.cpp
	$(CXX) -c -o "$@" $(CXXFLAGS) \
		$(patsubst %,-D%=1,$(ALLDEFS)) \
		$(addprefix -I,$(ALLINC)) \
		"$<"

%.d : %.c
	$(CC) -E $(CFLAGS) \
		$(patsubst %,-D%=1,$(ALLDEFS)) \
		$(addprefix -I,$(ALLINC)) \
		"$<" | \
	$(MKDEPEND) \
		--srcfile "$<" \
		--target "$(patsubst %.c,\$$(OBJDIR)/%.obj,$<)" \
		--target "$@" \
		$(MKDEPENDFLAGS) \
		-o "$@"

%.d : %.cxx
	$(CXX) -E $(CXXFLAGS) \
		$(patsubst %,-D%=1,$(ALLDEFS)) \
		$(addprefix -I,$(ALLINC)) \
		"$<" | \
	$(MKDEPEND) \
		--srcfile "$<" \
		--target "$(patsubst %.cxx,\$$(OBJDIR)/%.obj,$<)" \
		--target "$@" \
		$(MKDEPENDFLAGS) \
		-o "$@"

%.d : %.cpp
	$(CXX) -E $(CXXFLAGS) \
		$(patsubst %,-D%=1,$(ALLDEFS)) \
		$(addprefix -I,$(ALLINC)) \
		"$<" | \
	$(MKDEPEND) \
		--srcfile "$<" \
		--target "$(patsubst %.cpp,\$$(OBJDIR)/%.obj,$<)" \
		--target "$@" \
		$(MKDEPENDFLAGS) \
		-o "$@"

#
# The documentation tells us to "munch" the DKM, which creates a function
# that calls C++ static constructors and destructors.  This function is
# then compiled and linked using the C compiler.  Shouldn't the C++
# compiler be smart enough to do all of that for us?  But this is the
# way that Workbench does it, so let's emulate that for now.
#

ifeq ($(OCPI_BUILD_SHARED_LIBRARIES),1)

#
# When we build our own libraries as "shared" libraries, then we don't
# need them to link our "executables".  Unfortunately, that means that
# the linker will not complain about unresolved symbols.
#

$(OBJDIR)/%.exe : $(OBJDIR)/%.obj
	$(NM) $(filter %.obj,$^) | $(MUNCH) \
		> $(OBJDIR)/$(basename $(notdir $@))-vxdkm-ctdc.c
	$(CC) $(CFLAGS) -fdollars-in-identifiers \
		-o $(OBJDIR)/$(basename $(notdir $@))-vxdkm-ctdc.o \
		$(OBJDIR)/$(basename $(notdir $@))-vxdkm-ctdc.c
	$(CC) -o "$@" -r -nostdlib -Wl,-X \
		-T $(WIND_BASE)/target/h/tool/gnu/ldscripts/link.OUT \
		$(OBJDIR)/$(basename $(notdir $@))-vxdkm-ctdc.o \
		$(filter %.obj,$^)
else
$(OBJDIR)/%.exe : $(OBJDIR)/%.obj
	$(NM) $(filter %.obj,$^) $(filter %.a,$^) | $(MUNCH) \
		> $(OBJDIR)/$(basename $(notdir $@))-vxdkm-ctdc.c
	$(CC) $(CFLAGS) -fdollars-in-identifiers \
		-o $(OBJDIR)/$(basename $(notdir $@))-vxdkm-ctdc.o \
		$(OBJDIR)/$(basename $(notdir $@))-vxdkm-ctdc.c
	$(CC) -o "$@" -r -nostdlib -Wl,-X \
		-T $(WIND_BASE)/target/h/tool/gnu/ldscripts/link.OUT \
		$(OBJDIR)/$(basename $(notdir $@))-vxdkm-ctdc.o \
		$(filter %.obj,$^) \
		$(patsubst %,-L%$(OCPI_OUT_DIR),$(dir $(ALLLIBS))) \
		$(addprefix -L,$(dir $(SYSLIBS))) \
		$(addprefix -l,$(notdir $(ALLLIBS) $(SYSLIBS))) \
		$(BASICLIBS)
endif

endif
endif
endif

#
# OCPI_CORBA_ORB configuration
#

ifeq ($(OCPI_HAVE_CORBA),1)

ifeq ($(OCPI_CORBA_ORB),TAO)

IDL = TAO_ROOT="$(TAO_ROOT)" TAO_IDL_PREPROCESSOR="$(CC)" $(TAO_BIN)/tao_idl

ALLIDLINC = $(TAO_INC) $(TAO_INC)/tao

IDLOPTS = -ss _s.cxx -cs .cxx -hc .h -hs _s.h -ci .inl -si _s.inl -H binary_search

ifeq ($(OCPI_OS),linux)
LD_LIBRARY_PATH := $(LD_LIBRARY_PATH):$(ACE_LIB)
export LD_LIBRARY_PATH
endif

ifeq ($(CLIENT_IDL_ONLY),1)
IDLOPTS += -Ssi -Ssc
endif

ifeq ($(TAO_DEBUG),1)
TAOLIBINFIX = d
else
TAOLIBINFIX =
endif

TAOINCDIRS = $(ACE_INC) $(TAO_INC) $(TAO_INC)/orbsvcs

TAODALIBS = $(TAO_LIB)/TAO_DynamicAny$(TAOLIBINFIX) \
	$(TAO_LIB)/TAO_IFR_Client$(TAOLIBINFIX) \
	$(TAO_LIB)/TAO_TypeCodeFactory$(TAOLIBINFIX)

#
# The following libraries need to be added for TAO 1.4.8
#

TAOBASELIBS += $(TAO_LIB)/TAO_CosNaming_Skel$(TAOLIBINFIX) \
	$(TAO_LIB)/TAO_CosNaming$(TAOLIBINFIX) \
	$(TAO_LIB)/TAO_AnyTypeCode$(TAOLIBINFIX) \
	$(TAO_LIB)/TAO_CodecFactory$(TAOLIBINFIX) \
	$(TAO_LIB)/TAO_PortableServer$(TAOLIBINFIX) \
	$(TAO_LIB)/TAO_IORTable$(TAOLIBINFIX) \
	$(TAO_LIB)/TAO$(TAOLIBINFIX) \
	$(ACE_LIB)/ACE$(TAOLIBINFIX)

  ALLDEFS += OCPI_USES_TAO
  ORBINCDIRS = $(TAOINCDIRS)
  ORBLIBDIRS = $(TAOLIBDIRS)
  ORBLIBS += $(TAOBASELIBS)

MKDEPENDFLAGS += \
	--xpattern ACE_wrappers \
	--xpattern $(ACE_INC)/ace \
	--xpattern $(TAO_INC)/tao \
	--xpattern $(ORBSVCS)

endif # End: ifeq ($(OCPI_CORBA_ORB),TAO)

ifeq ($(OCPI_CORBA_ORB),OMNI)
  IDL=$(OCPI_BASE_DIR)do_omniidl.csh
  IDLOPTS=
  ALLDEFS += OCPI_USES_OMNI
  ORBINCDIRS = $(OCPI_OMNI_INCLUDE_DIR)
  ORBLIBS = $(OCPI_OMNI_LIBRARY_DIR)/omniORB4 $(OCPI_OMNI_LIBRARY_DIR)/omniDynamic4 $(OCPI_OMNI_LIBRARY_DIR)/omnithread $(OCPI_OMNI_LIBRARY_DIR)/COS4 $(OCPI_OMNI_LIBRARY_DIR)/COSDynamic4\

endif # End: ifeq ($(OCPI_CORBA_ORB),OMNI)

endif # End: ifeq ($(OCPI_HAVE_CORBA),1)

%.cxx %.h %_s.cxx %_s.h : %.idl
	$(IDL) $(IDLOPTS) $(patsubst %,-I%,$(ALLIDLINC)) "$<"

%.d : %.idl
	$(IDL) -E $(patsubst %,-I%,$(ALLIDLINC)) "$<" | \
	$(MKDEPEND) \
		--srcfile "$<" \
		--target "$(patsubst %.idl,%.h,$<)" \
		--target "$(patsubst %.idl,%.cxx,$<)" \
		--target "$(patsubst %.idl,%_s.h,$<)" \
		--target "$(patsubst %.idl,%_s.cxx,$<)" \
		--target "$(patsubst %.idl,%.d,$<)" \
		$(MKDEPENDFLAGS) \
		-o "$@"

#
# SCA configuration
#

ifeq ($(SCAVERSION),2.2.2)
ALLDEFS += OCPI_USES_SCA222
else
ifeq ($(SCAVERSION),2.2)
ALLDEFS += OCPI_USES_SCA22
else
$(error Unknown SCA version "$(SCAVERSION)")
endif
endif


#
# Generic compile-time configuration
#

cleanup:
	-rm -f *vxdkm-ctdc* *.vxe *.exe *.obj *.out *.map *.o *.so *.dylib *.ilk *.sbr *.suo *.sln *.pdb *.bsc core* *~ *.d

distcleanup:	cleanup
	-rm -f *.d *.cdb *.inl

#
# Package exported include files.
#
# For the _LIBS variables, the last path component is the library's base
# name, which will be rewritten appropriately.
#

OCPI_EXTERNAL_EXPORTS = \
	$(OCPI_BASE_DIR)core/local/util/misc/include \
	$(OCPI_BASE_DIR)core/local/util/driver/include \
	$(OCPI_BASE_DIR)core/dataplane/rdma_drivers/pio/include \
	$(OCPI_BASE_DIR)core/dataplane/rdma_driver_interface/interfaces/include


OCPIOS_EXPORTS = $(OCPI_BASE_DIR)adapt/os/ocpios/interfaces/include
OCPIOS_LIBS = $(OCPI_BASE_DIR)adapt/os/ocpios/ocpios

DATA_TRANSFER_EXPORTS = \
	$(OCPI_BASE_DIR)core/$(DATAPLANE)/rdma_driver_interface/interfaces/include
DATA_TRANSFER_LIBS = $(OCPI_BASE_DIR)core/$(DATAPLANE)/rdma_driver_interface/rdma_driver_interface

TX_TRANSFER_LIBS = $(OCPI_BASE_DIR)core/$(DATAPLANE)/rdma_drivers/rdma_drivers

DATA_TRANSPORT_EXPORTS = \
	$(OCPI_BASE_DIR)core/$(DATAPLANE)/transport/interface/include \
	$(OCPI_BASE_DIR)core/$(DATAPLANE)/transport/client_server/include \
	$(OCPI_BASE_DIR)core/$(DATAPLANE)/transport/impl/include \
	$(OCPI_BASE_DIR)core/$(DATAPLANE)/transport/ddnp/include
DATA_TRANSPORT_LIBS = $(OCPI_BASE_DIR)core/$(DATAPLANE)/transport/transport


CONTAINER_EXPORTS = \
	$(OCPI_BASE_DIR)core/container/interfaces/api/include \
	$(OCPI_BASE_DIR)core/container/cp289_container/cp289/include
CONTAINER_LIBS = \
	$(OCPI_BASE_DIR)core/container/interfaces/interfaces

CP289_CONTAINER_LIBS = \
	$(OCPI_BASE_DIR)core/container/cp289_container/cp289_container

RPL_CONTAINER_LIBS = \
	$(OCPI_BASE_DIR)core/container/rpl_container/rpl_container


LOGGER_EXPORTS = $(OCPI_BASE_DIR)core/local/logger/logger/include
LOGGER_LIBS = $(OCPI_BASE_DIR)core/local/logger/logger

UTIL_EXPORTS = \
	$(OCPI_BASE_DIR)core/local/util/driver/include \
	$(OCPI_BASE_DIR)core/local/util/ezxml/include \
	$(OCPI_BASE_DIR)core/local/util/filefs/include \
	$(OCPI_BASE_DIR)core/local/util/http/include \
	$(OCPI_BASE_DIR)core/local/util/ior/include \
	$(OCPI_BASE_DIR)core/local/util/memfs/include \
	$(OCPI_BASE_DIR)core/local/util/misc/include \
	$(OCPI_BASE_DIR)core/local/util/parentChild/include \
	$(OCPI_BASE_DIR)core/local/util/property/include \
	$(OCPI_BASE_DIR)core/local/util/streamfs/include \
	$(OCPI_BASE_DIR)core/local/util/tcp/include \
	$(OCPI_BASE_DIR)core/local/util/timeEmit/include \
	$(OCPI_BASE_DIR)core/local/util/vfs/include \
	$(OCPI_BASE_DIR)core/local/util/zipfs/include \
	$(OCPI_BASE_DIR)core/local/util/res/include \
	$(OCPI_BASE_DIR)core/local/util/list/include \
	$(OCPI_BASE_DIR)core/local/util/thread/include \
	$(OCPI_BASE_DIR)core/local/util/fasttime/include \
	$(OCPI_BASE_DIR)core/local/util/sockets/include
UTIL_LIBS = $(OCPI_BASE_DIR)core/local/util/util

ifeq ($(SCAVERSION),2.2)
ORB_SERVICES_EXPORTS = $(OCPI_BASE_DIR)core/corba/orb_services/cf22log/idl
else
ORB_SERVICES_EXPORTS = $(OCPI_BASE_DIR)core/corba/orb_services/lwlog/idl
endif

ORB_SERVICES_EXPORTS += \
	$(OCPI_BASE_DIR)core/corba/orb_services/corba/include \
	$(OCPI_BASE_DIR)core/corba/orb_services/naming/idl \
	$(OCPI_BASE_DIR)core/corba/orb_services/event/idl
ORB_SERVICES_LIBS = $(OCPI_BASE_DIR)core/corba/orb_services/orb_services

CORBA_UTIL_EXPORTS = $(OCPI_BASE_DIR)core/corba/corba_util/misc/include
CORBA_UTIL_LIBS = $(OCPI_BASE_DIR)core/corba/corba_util/corba_util

ifeq ($(SCAVERSION),2.2)
SCA_CF_EXPORTS = $(OCPI_BASE_DIR)core/sca/cf/cf22/idl
else
SCA_CF_EXPORTS = $(OCPI_BASE_DIR)core/sca/cf/cf222/idl
endif

SCA_CF_LIBS = $(OCPI_BASE_DIR)core/sca/cf/cf

CF_UTIL_EXPORTS = \
	$(OCPI_BASE_DIR)core/sca/cf_util/misc/include \
	$(OCPI_BASE_DIR)core/sca/cf_util/device_base/include \
	$(OCPI_BASE_DIR)core/sca/cf_util/vfs/include
CF_UTIL_LIBS = $(OCPI_BASE_DIR)core/sca/cf_util/cf_util


WCI_API_BASE = $(OCPI_BASE_DIR)core/control/wci_api
WCI_API_EXPORTS = $(WCI_API_BASE)/interface/include \
	$(WCI_API_BASE)/rpl/include \
	$(WCI_API_BASE)/api/include
WCI_API_LIBS = $(WCI_API_BASE)/wci_api

