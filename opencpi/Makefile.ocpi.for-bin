# #####
#
#  Copyright (c) Mercury Federal Systems, Inc., Arlington VA., 2009-2010
#
#    Mercury Federal Systems, Incorporated
#    1901 South Bell Street
#    Suite 402
#    Arlington, Virginia 22202
#    United States of America
#    Telephone 703-413-0781
#    FAX 703-413-0784
#
#  This file is part of OpenCPI (www.opencpi.org).
#     ____                   __________   ____
#    / __ \____  ___  ____  / ____/ __ \ /  _/ ____  _________ _
#   / / / / __ \/ _ \/ __ \/ /   / /_/ / / /  / __ \/ ___/ __ `/
#  / /_/ / /_/ /  __/ / / / /___/ ____/_/ / _/ /_/ / /  / /_/ /
#  \____/ .___/\___/_/ /_/\____/_/    /___/(_)____/_/   \__, /
#      /_/                                             /____/
#
#  OpenCPI is free software: you can redistribute it and/or modify
#  it under the terms of the GNU Lesser General Public License as published
#  by the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  OpenCPI is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU Lesser General Public License for more details.
#
#  You should have received a copy of the GNU Lesser General Public License
#  along with OpenCPI.  If not, see <http://www.gnu.org/licenses/>.
#
########################################################################### #



all: executables

include ../../../../../MakeVars.ocpi
ifneq ($(OCPI_OUT_DIR),)
OBJDIR = ../../$(OCPI_OUT_DIR)
LIBDIR = $(OBJDIR)
else
OCPI_OUT_DIR = .
OBJDIR = .
LIBDIR = ../..
endif
include ../../../../../Makefile.ocpi.common

ifneq ($(wildcard ../../Makefile.ocpi.imports),)
include ../../Makefile.ocpi.imports
endif

ifneq ($(wildcard ../../bin/Makefile.ocpi.imports),)
include ../../bin/Makefile.ocpi.imports
endif

ALLINC += . $(wildcard ../../*/include) $(wildcard ../../*/idl) $(EXTRA_INCLUDES)

#
# Add this package's library to $(ALLLIBS).
#

ifeq ($(OCPI_OS),winnt)
ifeq ($(OCPI_BUILD_SHARED_LIBRARIES),1)
ALLLIBS := $(patsubst $(LIBDIR)/%.dll,../../%,$(wildcard $(LIBDIR)/*.dll)) $(ALLLIBS)
else
ALLLIBS := $(patsubst $(LIBDIR)/%.lib,../../%,$(wildcard $(LIBDIR)/*.lib)) $(ALLLIBS)
endif
else
ifneq ($(filter linux darwin,$(OCPI_OS)),)
ifeq ($(OCPI_BUILD_SHARED_LIBRARIES),1)
ALLLIBS := $(patsubst $(LIBDIR)/lib%.$(SO),../../%,$(wildcard $(LIBDIR)/lib*.$(SO))) $(ALLLIBS)
else
ALLLIBS := $(patsubst $(LIBDIR)/lib%.a,../../%,$(wildcard $(LIBDIR)/lib*.a)) $(ALLLIBS)
endif
else
ifeq ($(OCPI_OS),vxworksdkm)
ifeq ($(OCPI_BUILD_SHARED_LIBRARIES),0)
ALLLIBS := $(patsubst $(LIBDIR)/lib%.a,../../%,$(wildcard $(LIBDIR)/lib*.a)) $(ALLLIBS)
endif
endif
endif
endif

ifeq ($(OCPI_OS),vxworksdkm)
EXCLUDE_SOURCES += %-vxdkm-ctdc.c
endif

#
# C/C++ files
#

CSOURCES = $(filter-out $(EXCLUDE_SOURCES),$(wildcard *.c))
CXXSOURCES = $(filter-out $(EXCLUDE_SOURCES),$(wildcard *.cxx))
ASMSOURCES = $(filter-out $(EXCLUDE_SOURCES),$(wildcard *.asm))
COBJECTS = $(patsubst %.c,$(OBJDIR)/%.obj,$(CSOURCES))
CXXOBJECTS = $(patsubst %.cxx,$(OBJDIR)/%.obj,$(CXXSOURCES))
ASMOBJECTS = $(patsubst %.asm,$(OBJDIR)/%.obj,$(ASMSOURCES))
OBJECTS = $(COBJECTS) $(CXXOBJECTS) $(ASMOBJECTS)
CDEPENDS = $(patsubst %.c,%.d,$(CSOURCES))
CXXDEPENDS = $(patsubst %.cxx,%.d,$(CXXSOURCES))

CMAINS = $(filter-out $(EXCLUDE_SOURCES),$(wildcard *_main.c))
CXXMAINS = $(filter-out $(EXCLUDE_SOURCES),$(wildcard *_main.cxx))
OTHEROBJS = $(filter-out %_main.obj,$(OBJECTS))

ORIGEXECUTABLES = $(patsubst %_main.c,$(OBJDIR)/%_main.exe,$(CMAINS)) \
	$(patsubst %_main.cxx,$(OBJDIR)/%_main.exe,$(CXXMAINS))
WINNTEXECUTABLES = $(patsubst %_main.c,$(OBJDIR)/%.exe,$(CMAINS)) \
	$(patsubst %_main.cxx,$(OBJDIR)/%.exe,$(CXXMAINS))
LINUXEXECUTABLES = $(patsubst %_main.c,$(OBJDIR)/%,$(CMAINS)) \
	$(patsubst %_main.cxx,$(OBJDIR)/%,$(CXXMAINS))
VXWORKSDKMEXECUTABLES = $(patsubst %_main.c,$(OBJDIR)/%.out,$(CMAINS)) \
	$(patsubst %_main.cxx,$(OBJDIR)/%.out,$(CXXMAINS))
ALLEXECUTABLES = $(ORIGEXECUTABLES) $(WINNTEXECUTABLES) \
	$(LINUXEXECUTABLES) $(VXWORKSDKMEXECUTABLES)

ifeq ($(OCPI_OS),winnt)
EXECUTABLES = $(WINNTEXECUTABLES)
else
ifneq ($(filter linux darwin,$(OCPI_OS)),)
EXECUTABLES = $(LINUXEXECUTABLES)
else
ifeq ($(OCPI_OS),vxworksdkm)
EXECUTABLES = $(VXWORKSDKMEXECUTABLES)
endif
endif
endif

#
# Rules
#

.PHONY: objdir executables depends generated clean distclean cleanup distcleanup

objdir:
	$(AT)if test "x$(OCPI_OUT_DIR)" != "x" -a ! -d $(OBJDIR); then \
		echo Creating object directory $(OBJDIR); \
		mkdir -p $(OBJDIR) ; \
	fi

depends: $(CDEPENDS) $(CXXDEPENDS)
generated: depends $(ALLGENERATED)
executables: generated objdir $(EXECUTABLES)
clean: cleanup
	rm -f $(OBJECTS) $(ALLEXECUTABLES)
distclean: distcleanup
	rm -f $(OBJECTS) $(ALLEXECUTABLES) $(ALLGENERATED)

ifeq ($(OCPI_OS),winnt)
$(OBJDIR)/%.exe: $(OBJDIR)/%_main.exe
	cp $< $@
else
ifneq ($(filter linux darwin,$(OCPI_OS)),)
$(OBJDIR)/%: $(OBJDIR)/%_main.exe
	cp -p $< $@; touch $@
else
ifeq ($(OCPI_OS),vxworksdkm)
$(OBJDIR)/%.out: $(OBJDIR)/%_main.exe
	cp $< $@
endif
endif
endif

ifeq ($(OCPI_OS),winnt)
ifeq ($(OCPI_BUILD_SHARED_LIBRARIES),1)
$(EXECUTABLES): $(OBJDIR)/%.exe: $(OBJDIR)/%_main.exe
$(ORIGEXECUTABLES): $(OBJDIR)/%.exe: $(OBJDIR)/%.obj $(OTHEROBJS) $(wildcard $(LIBDIR)/*.dll) \
	$(join $(addsuffix $(OCPI_OUT_DIR)/,$(dir $(ALLLIBS))),$(addsuffix .dll,$(notdir $(ALLLIBS))))
else
$(EXECUTABLES): $(OBJDIR)/%.exe: $(OBJDIR)/%_main.exe
$(ORIGEXECUTABLES): $(OBJDIR)/%.exe: $(OBJDIR)/%.obj $(OTHEROBJS) $(wildcard $(LIBDIR)/*.lib) \
	$(join $(addsuffix $(OCPI_OUT_DIR)/,$(dir $(ALLLIBS))),$(addsuffix .lib,$(notdir $(ALLLIBS))))
endif
else
ifneq ($(filter linux darwin,$(OCPI_OS)),)
ifeq ($(OCPI_BUILD_SHARED_LIBRARIES),1)
$(EXECUTABLES): $(OBJDIR)/%: $(OBJDIR)/%_main.exe
#$(info $(OBJDIR) ccc)
#$(info $(ORIGEXECUTABLES) eee)
#$(info $(LIBDIR) lll)
#$(info $(wildcard $(LIBDIR)/lib*.$(SO)) xxx)
$(ORIGEXECUTABLES): $(OBJDIR)/%.exe: $(OBJDIR)/%.obj $(OTHEROBJS) $(wildcard $(LIBDIR)/lib*.$(SO)) \
	$(join $(addsuffix $(OCPI_OUT_DIR)/,$(dir $(ALLLIBS))),$(patsubst %,lib%.$(SO),$(notdir $(ALLLIBS))))
else
$(EXECUTABLES): $(OBJDIR)/%: $(OBJDIR)/%_main.exe
$(ORIGEXECUTABLES): $(OBJDIR)/%.exe: $(OBJDIR)/%.obj $(OTHEROBJS) $(wildcard $(LIBDIR)/lib*.a) \
	$(join $(addsuffix $(OCPI_OUT_DIR)/,$(dir $(ALLLIBS))),$(patsubst %,lib%.a,$(notdir $(ALLLIBS))))
endif
else
ifeq ($(OCPI_OS),vxworksdkm)

ifeq ($(OCPI_BUILD_SHARED_LIBRARIES),1)
$(EXECUTABLES): $(OBJDIR)/%.out: $(OBJDIR)/%_main.exe
$(ORIGEXECUTABLES): $(OBJDIR)/%.exe: $(OBJDIR)/%.obj $(OTHEROBJS)
else
$(EXECUTABLES): $(OBJDIR)/%.out: $(OBJDIR)/%_main.exe
$(ORIGEXECUTABLES): $(OBJDIR)/%.exe: $(OBJDIR)/%.obj $(OTHEROBJS) $(wildcard $(LIBDIR)/lib*.a) \
	$(join $(addsuffix $(OCPI_OUT_DIR)/,$(dir $(ALLLIBS))),$(patsubst %,lib%.a,$(notdir $(ALLLIBS))))
endif

endif
endif
endif

#
# Direct dependencies for C/C++ files
#

$(COBJECTS): $(OBJDIR)/%.obj: %.c
$(CXXOBJECTS): $(OBJDIR)/%.obj: %.cxx
$(ASMOBJECTS): $(OBJDIR)/%.obj: %.asm
$(CDEPENDS): %.d: %.c
$(CXXDEPENDS): %.d: %.cxx

#
# Include generated dependency files
#

ifneq ($(findstring clean,$(MAKECMDGOALS)),clean)
ifneq ($(wildcard *.d),)
include *.d
endif
endif
