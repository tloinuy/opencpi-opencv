#include <CpiOsDataTypes.h>
#include <CpiOsStaticLoadableModule.h>
#include <CpiOsSizeCheck.h>
#include <cassert>
#include <string>
#include <vector>

using namespace CPI::OS;

static std::vector<StaticLoadableModule*> m_loadedModules;

namespace {
  struct ShemData {
	std::string*    moduleName;
	void*           entryPoint;
  };
}

inline ShemData &o2hmid(CPI::OS::uint64_t * ptr)
{
  return *reinterpret_cast<ShemData *> (ptr);
}



CPI::OS::StaticLoadableModule::StaticLoadableModule (const char* moduleName, void* ep)
{
 
  o2hmid(m_osOpaque).moduleName = new std::string( moduleName );
  o2hmid(m_osOpaque).entryPoint = ep;
  m_loadedModules.push_back( this );
}

CPI::OS::StaticLoadableModule* 
CPI::OS::StaticLoadableModule::findModule(const char* moduleName)
{
    const char* mName;
	if ( strncmp( "x-container-static:", moduleName, strlen("x-container-static:") ) == 0 ) {
		mName = &moduleName[strlen("x-container-static:")];
	}
	else {
		mName = moduleName;
	}
	
	std::vector<StaticLoadableModule*>::iterator it;
	for ( it=m_loadedModules.begin(); it != m_loadedModules.end(); it++ ) {
		if ( strcmp( o2hmid((*it)->m_osOpaque).moduleName->c_str(), mName) == 0 ) {
			return (*it);
		}
	}
	return NULL;
}



CPI::OS::StaticLoadableModule::~StaticLoadableModule ()
{

  std::vector<StaticLoadableModule*>::iterator it;
  for ( it=m_loadedModules.begin(); it != m_loadedModules.end(); it++ ) {
    if ( o2hmid((*it)->m_osOpaque).moduleName == o2hmid (m_osOpaque).moduleName ) {
      m_loadedModules.erase(it);
      break;
    }
  }
}


void *
CPI::OS::StaticLoadableModule::getEntryPoint()
{
#if !defined(NDEBUG)
  assert (o2hmid (m_osOpaque).entryPoint );
#endif

  return o2hmid (m_osOpaque).entryPoint;
}

